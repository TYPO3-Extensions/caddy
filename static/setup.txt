

  ///////////////////////////////////////////////////////////////
  //
  // INDEX
  //
  // includeLibs
  // plugin.tx_caddy_pi1
  // plugin.tx_caddy_pi2
  // plugin.tx_caddy_pi3



  ///////////////////////////////////////////////////////////////
  //
  // includeLibs

includeLibs {
  tx_caddy_powermail        = EXT:caddy/lib/powermail/class.tx_caddy_powermail.php
  tx_caddy_session          = EXT:caddy/lib/class.tx_caddy_session.php
  tx_caddy_userfunc         = EXT:caddy/lib/userfunc/class.tx_caddy_userfunc.php
}
  // includeLibs



  ///////////////////////////////////////////////////////////////
  //
  // plugin.tx_caddy_pi1

plugin.tx_caddy_pi1 {
    // limits
  conditions =
  conditions {
      // items
    limits =
    limits {
        // gross
      items =
      items {
          // min
        gross =
        gross {
            // [double] minimal price. This value will compared with the gross sum of of the items (without service costs)
          min =
        }
      }
    }
  }
    // table, title, gross, tax, sku, min, max, service attributes
  db =
  db {
    table = {$plugin.caddy.db.table}
    title = {$plugin.caddy.db.title}
    gross = {$plugin.caddy.db.price}
    tax   = {$plugin.caddy.db.tax}
    sku   = {$plugin.caddy.db.sku}
    min   = {$plugin.caddy.db.min}
    max   = {$plugin.caddy.db.max}
    service_attribute_1   = {$plugin.caddy.db.service_attribute_1}
    service_attribute_2   = {$plugin.caddy.db.service_attribute_2}
    service_attribute_3   = {$plugin.caddy.db.service_attribute_3}
  }
    // [Boolean] Prompts a debug report with informations about TypoScript to the frontend
  debug  = {$plugin.caddy.debug.paramsAndTs}

    // gross, min, max, qty, sku, tax, title, uid, volume, weight
  getpost =
  getpost {
    gross = TEXT
    gross {
      data = GP:{$plugin.caddy.getpost.price}
      htmlSpecialChars = 1
    }
    max = TEXT
    max {
      data = GP:{$plugin.caddy.getpost.max}
      htmlSpecialChars = 1
    }
    min = TEXT
    min {
      data = GP:{$plugin.caddy.getpost.min}
      htmlSpecialChars = 1
    }
    qty = TEXT
    qty {
      data = GP:{$plugin.caddy.getpost.qty}
      intval = 1
    }
    sku = TEXT
    sku {
      data = GP:{$plugin.caddy.getpost.sku}
      htmlSpecialChars = 1
    }
    tax = TEXT
    tax {
      value = {$plugin.caddy.tax.normalCalc}
    }
    title = TEXT
    title {
      data = GP:{$plugin.caddy.getpost.title}
      htmlSpecialChars = 1
    }
    uid = TEXT
    uid {
      data = GP:{$plugin.caddy.getpost.uid}
      intval = 1
    }
    volume = TEXT
    volume {
      data = GP:{$plugin.caddy.getpost.volume}
      floatval = 1
    }
    weight = TEXT
    weight {
      data = GP:{$plugin.caddy.getpost.weight}
      floatval = 1
    }
  }

    // ajax, jquery
  javascript =
  javascript {
      // caddyCheckOut
    ajax =
    ajax {
        // typeNum, config, 10
      caddyCheckOut = PAGE
      caddyCheckOut {
        typeNum = {$plugin.caddy.typeNum.caddyCheckOut}
        config {
          disableAllHeaderCode  = 1
          xhtml_cleaning        = 0
          admPanel              = 0
          metaCharset           = UTF-8
        }
        10 < styles.content.get
      }
    }
      // plugins
    jquery =
    jquery {
        // caddy, fancybox
      plugins =
      plugins {
          // library, localisation, plugin
        caddy =
        caddy {
          library = EXT:caddy/res/javascript/jquery.caddy-4.0.0/library/tx_caddy_pi1-4.0.0.js
          library {
              // [Boolean] 1 (default): place JSS scripts in the footer section
            footer = 1
              // [Boolean] 0: link to the script file, 1 (default): include the script inline
            inline = 1
              // t3caddyalert, typenum
            marker =
            marker {
                // Enable/Disable JSS alerts
              t3caddyalert = TEXT
              t3caddyalert {
                value = 1
              }
              typenum = TEXT
              typenum {
                value = {$plugin.caddy.typeNum.caddyCheckOut}
              }
            }
          }
            // [STRING] Path to the jss file of the t3caddy localisation. ###LANG### will be replacedwhile runtime
          localisation = EXT:caddy/res/javascript/jquery.caddy-4.0.0/plugin/localisation-4.0.0.###LANG###.js
          localisation {
              // [Boolean] 1 (default): place JSS scripts in the footer section
            footer = 1
              // [Boolean] 0 (default): link to the script file, 1: include the script inline
            inline = 0
          }
            // [String] Path to the jss file of the t3caddy plugin
          plugin = EXT:caddy/res/javascript/jquery.caddy-4.0.0/plugin/jquery.t3caddy-4.0.0.js
          plugin {
              // [Boolean] 1 (default): place JSS scripts in the footer section
            footer = 1
              // [Boolean] 0 (default): link to the script file, 1: include the script inline
            inline = 0
          }
        }
          // enabled, configuration, plugin
        fancybox =
        fancybox {
            // [String] yes || no
          enabled = {$plugin.caddy.fancybox.enabled}
            // fancybox, fancyboxPosition, fancyboxLibrary, fancyboxCSS, source, sourcePosition
          includes =
          includes {
              // Fancybox: Include the jQuery fancybox library (1.3.4) and CSS provided by Caddy. If you are using another fancybox library and CSS, please set this option to "disabled"
            fancybox = {$plugin.caddy.jquery.fancybox}
              // Fancybox CSS
            fancyboxCSS = <link rel="stylesheet" type="text/css" href="{$plugin.caddy.jquery.fancyboxCSS}" media="screen" />
              // Fancybox library
            fancyboxLibrary = <script src="{$plugin.caddy.jquery.fancyboxLibrary}" type="text/javascript"></script>
              // Fancybox position : Place the jQuery fancybox library at the top of the page (HTML head) or at the bottom
            fancyboxPosition = {$plugin.caddy.jquery.fancyboxPosition}
              // jQuery : jQuery: Use the jQuery library (1.4.3) provided by the fancybox. If you are using another jquery library, please set this option to "disabled"
            source = {$plugin.caddy.jquery.source}
              // Fancybox library
            sourceLibrary = <script src="{$plugin.caddy.jquery.sourceLibrary}" type="text/javascript"></script>
              // jQuery position : Place the jQuery library at the top of the page (HTML head) or at the bottom
            sourcePosition = {$plugin.caddy.jquery.sourcePosition}
          }
            // params, paramsSpaceLeft, script, variables
          javascript = 
          javascript {
              // autoScale, ..., width
            params = 
            params {
                // autoScale : If true, FancyBox is scaled to fit in viewport 
              autoScale = {$plugin.caddy.fancybox.autoScale}
                // autoDimensions : For inline and ajax views, resizes the view to the element recieves. Make sure it has dimensions otherwise this will give unexpected results
              autoDimensions = {$plugin.caddy.fancybox.autoDimensions}
                // centerOnScroll : When true, FancyBox is centered while scrolling page
              centerOnScroll = {$plugin.caddy.fancybox.centerOnScroll}
                // enableEscapeButton : Toggle if pressing Esc button closes FancyBox
              enableEscapeButton = {$plugin.caddy.fancybox.enableEscapeButton}
                // height : Height for content types 'iframe' and 'swf'. Also set for inline content if 'autoDimensions' is set to 'false'
              height = TEXT
              height {
                value = {$plugin.caddy.fancybox.height}
                wrap  = '|'
              }
                // hideOnOverlayClick : Toggle if clicking the overlay should close FancyBox
              hideOnOverlayClick = {$plugin.caddy.fancybox.hideOnOverlayClick}
                // hideOnContentClick : Toggle if clicking the content should close FancyBox
              hideOnContentClick = {$plugin.caddy.fancybox.hideOnContentClick}
                // cyclic : When true, galleries will be cyclic, allowing you to keep pressing next/back.
              cyclic = {$plugin.caddy.fancybox.cyclic}
                // margin : Space between viewport and FancyBox wrapper
              margin = {$plugin.caddy.fancybox.margin}
                // modal : When true, 'overlayShow' is set to 'true' and 'hideOnOverlayClick', 'hideOnContentClick', 'enableEscapeButton', 'showCloseButton' are set to 'false'
              modal = {$plugin.caddy.fancybox.modal}
                // opacity : When true, transparency of content is changed for elastic transitions
              opacity = {$plugin.caddy.fancybox.opacity}
                // overlayColor : Color of the overlay
              overlayColor = TEXT
              overlayColor {
                value = {$plugin.caddy.fancybox.overlayColor}
                wrap  = '|'
              }
                // overlayOpacity : Opacity of the overlay (from 0 to 1; default - 0.3)
              overlayOpacity = {$plugin.caddy.fancybox.overlayOpacity}
                // overlayShow : Toggle overlay
              overlayShow = {$plugin.caddy.fancybox.overlayShow}
                // padding : Space between FancyBox wrapper and content
              padding = {$plugin.caddy.fancybox.padding}
                // scrolling : Set the overflow CSS property to create or hide scrollbars. Can be set to 'auto', 'yes', or 'no'
              scrolling = TEXT
              scrolling {
                value = {$plugin.caddy.fancybox.scrolling}
                wrap  = '|'
              }
                // showCloseButton : Toggle close button
              showCloseButton = {$plugin.caddy.fancybox.showCloseButton}
                // showNavArrows : Toggle navigation arrows
              showNavArrows = {$plugin.caddy.fancybox.showNavArrows}
                // speedIn : Speed of the fade and elastic transitions, in milliseconds
              speedIn = {$plugin.caddy.fancybox.speedIn}
                // speedOut : Speed of the fade and elastic transitions, in milliseconds
              speedOut = {$plugin.caddy.fancybox.speedOut}
                // title : Forces title. Take a field of the current record.
              title = TEXT
              title {
                field = {$plugin.caddy.fancybox.title}
                wrap  = '|'
              }
                // titleShow : Toggle title
              titleShow = {$plugin.caddy.fancybox.titleShow}
                // titlePosition : The position of title. Can be set to 'outside', 'inside' or 'over'
              titlePosition = TEXT
              titlePosition {
                value = {$plugin.caddy.fancybox.titlePosition}
                wrap  = '|'
              }
                // transitionIn : The transition type. Can be set to 'elastic', 'fade' or 'none'
              transitionIn = TEXT
              transitionIn {
                value = {$plugin.caddy.fancybox.transitionIn}
                wrap  = '|'
              }
                // transitionOut : The transition type. Can be set to 'elastic', 'fade' or 'none'
              transitionOut = TEXT
              transitionOut {
                value = {$plugin.caddy.fancybox.transitionOut}
                wrap  = '|'
              }
                // type : Forces content type. Can be set to 'image', 'ajax', 'iframe', 'swf' or 'inline'
              type = TEXT
              type {
                value = {$plugin.caddy.fancybox.type}
                wrap  = '|'
              }
                // width : Width for content types 'iframe' and 'swf'. Also set for inline content if 'autoDimensions' is set to 'false'
              width = TEXT
              width {
                value = {$plugin.caddy.fancybox.width}
                wrap  = '|'
              }
            }
              // HTML space left for fancybox parameters - for a nice HTML code only
            paramsSpaceLeft = 22
              // Script
            script (

              <script type="text/javascript">
                $(document).ready(function() {
                  $("#c%uid%_step").fancybox({
                    %params%     
                    ajax : {
                      type : 'POST',
                      data : 'mydata=test'
                    }                    
                  });
                });
              </script>
)
              // Variables for the javascript
            variables = 
            variables {
                // field:uid
              uid = TEXT
              uid {
                value       = {field:uid}
                insertData  = 1
              }
            } 
          }
        }
      }
    }
  }

    // item, sum
  marker =
  marker {
      // delete, gross, min, max, uid, qty, service attributes (1-3), sku, title, tax
    item =
    item {
        // delete icon: for removing the current item from the caddy
      delete = IMAGE
      delete {
        file = {$plugin.caddy.html.color.icon.delete}
        altText.data = LLL:EXT:caddy/pi1/locallang.xml:delete
        titleText.data = LLL:EXT:caddy/pi1/locallang.xml:delete
        params = class="caddy_delete"
        imageLinkWrap = 1
        imageLinkWrap {
          enable = 1
          typolink.parameter.data = page:alias//TSFE:id
          typolink.additionalParams.wrap = &tx_caddy_pi1[del]=|
          typolink.additionalParams.field = uid
        }
      }
        // gross costs of the item
      gross = COA
      gross {
        10 = USER
        10.userFunc = tx_caddy_userfunc->numberformat
        10.userFunc {
          number = TEXT
          number.field = gross
          decimal = 2
          dec_point = {$plugin.caddy.main.dec_point}
          thousands_sep = {$plugin.caddy.main.thousands_sep}

          drs = {$plugin.caddy.debug.userfunc}
        }
        20 = TEXT
        20 {
          value = {$plugin.caddy.main.currencySymbol}
          noTrimWrap = | ||
        }
      }
        // minimum quantity for ordering 
      min = TEXT
      min {
        field = min
      }
        // maximum quantity for ordering 
      max = TEXT
      max {
        field = max
      }
        // net costs of the item
      net < .gross
      net.10.userFunc.number.field = net
        // uid of the item
      uid = TEXT
      uid {
        field = uid
      }
        // quantity of the item
      qty = TEXT
      qty {
        field = qty
      }
        // service attribute 1
      service_attribute_1 = TEXT
      service_attribute_1 {
        field = service_attribute_1
      }
        // service attribute 2
      service_attribute_2 = TEXT
      service_attribute_2 {
        field = service_attribute_2
      }
        // service attribute 3
      service_attribute_3 = TEXT
      service_attribute_3 {
        field = service_attribute_3
      }
        // stock keeping unit
      sku = TEXT
      sku {
        field = sku
      }
        // gross costs sum ( gross costs * quantity )
      sumgross < .gross
      sumgross.10.userFunc.number.field = sumgross
        // net costs sum ( net costs * quantity )
      sumnet < .gross
      sumnet.10.userFunc.number.field = sumnet
        // tax costs sum ( tax costs * quantity )
      sumtax < .gross
      sumtax.10.userFunc.number.field = sumtax
        // tax value of the item (0 , 1, 2)
      tax = TEXT
      tax {
        field = tax
      }
        // taxrate of the item
      taxrate = COA
      taxrate {
        10 = USER
        10 {
          userFunc = tx_caddy_userfunc->calcMultiply
          userFunc {
            number = TEXT
            number {
              field         = taxrate
            }
            multiplier    = 100
            decimal       = 0
            dec_point     = {$plugin.caddy.main.dec_point}
            thousands_sep = {$plugin.caddy.main.thousands_sep}
            drs           = {$plugin.caddy.debug.userfunc}
          }
        }
        20 = TEXT
        20 {
          value = {$plugin.caddy.main.percentSymbol}
        }
      }
        // label of the item
      title = TEXT
      title {
        field = title
      }
    }
      // labels, rates, values
    sum =
    sum {
        // payment, shipping, specials
      labels =
      labels {
          // label, gross
        optionspaymentlabel = TEXT
        optionspaymentlabel {
          field = optionspaymentlabel
        }
        optionsshippinglabel = TEXT
        optionsshippinglabel {
          field = optionsshippinglabel
        }
        optionsspecialslabels = TEXT
        optionsspecialslabels {
          field = optionsspecialslabels
        }
          // plus value, VAT
        taxrate_reduced_string = COA
        taxrate_reduced_string {
            // plus value
          10 = TEXT
          10 {
            value = plus
            lang { 
              de = zuz&uuml;glich 
              en = plus
            }
            noTrimWrap = || {$plugin.caddy.tax.reduced}{$plugin.caddy.main.percentSymbol} |
          }
            // VAT
          20 = TEXT
          20 {
            data = LLL:EXT:caddy/pi1/locallang.xml:tax_abbr
          }
        }
          // plus value, VAT
        taxrate_normal_string = COA
        taxrate_normal_string {
            // plus value
          10 = TEXT
          10 {
            value = plus
            lang { 
              de = zuz&uuml;glich 
              en = plus
            }
            noTrimWrap = || {$plugin.caddy.tax.normal}{$plugin.caddy.main.percentSymbol} |
          }
            // VAT
          20 = TEXT
          20 {
            data = LLL:EXT:caddy/pi1/locallang.xml:tax_abbr
          }
        }
      }
        // payment, shipping, specials
      rates =
      rates {
        optionspaymentsumrate = COA
        optionspaymentsumrate {
          10 = USER
          10 {
            userFunc = tx_caddy_userfunc->numberformat
            userFunc {
              number = TEXT
              number {
                field = optionspaymentsumrate
              }
              decimal       = {$plugin.caddy.main.decimal}
              dec_point     = {$plugin.caddy.main.dec_point}
              thousands_sep = {$plugin.caddy.main.thousands_sep}
              drs           = {$plugin.caddy.debug.userfunc}
            }
          }
          20 = TEXT
          20 {
            value = {$plugin.caddy.main.percentSymbol}
            noTrimWrap = | ||
          }
        }

        optionsshippingsumrate                           < .optionspaymentsumrate
        optionsshippingsumrate.10.userFunc.number.field  = optionsshippingsumrate

        optionsspecialssumrate                           < .optionspaymentsumrate
        optionsspecialssumrate.10.userFunc.number.field  = optionsspecialssumrate
      }
        // payment, shipping, specials, items, sum
      values =
      values {
        optionspaymentsumgross = COA
        optionspaymentsumgross {
          10 = USER
          10 {
            userFunc = tx_caddy_userfunc->numberformat
            userFunc {
              number = TEXT
              number {
                field = optionspaymentsumgross
              }
              decimal       = {$plugin.caddy.main.decimal}
              dec_point     = {$plugin.caddy.main.dec_point}
              thousands_sep = {$plugin.caddy.main.thousands_sep}
              drs           = {$plugin.caddy.debug.userfunc}
            }
          }
          20 = TEXT
          20 {
            value = {$plugin.caddy.main.currencySymbol}
            noTrimWrap = | ||
          }
        }
        optionspaymentsumnet          < .optionspaymentsumgross
        optionspaymentsumnet.10.userFunc.number.field         = optionspaymentsumnet
        optionspaymentsumtaxnormal    < .optionspaymentsumgross
        optionspaymentsumtaxnormal.10.userFunc.number.field   = optionspaymentsumtaxnormal
        optionspaymentsumtaxreduced   < .optionspaymentsumgross
        optionspaymentsumtaxreduced.10.userFunc.number.field  = optionspaymentsumtaxreduced

        optionsshippingsumgross       < .optionspaymentsumgross
        optionsshippingsumgross.10.userFunc.number.field      = optionsshippingsumgross
        optionsshippingsumnet         < .optionspaymentsumgross
        optionsshippingsumnet.10.userFunc.number.field        = optionsshippingsumnet
        optionsshippingsumtaxnormal   < .optionspaymentsumgross
        optionsshippingsumtaxnormal.10.userFunc.number.field  = optionsshippingsumtaxnormal
        optionsshippingsumtaxreduced  < .optionspaymentsumgross
        optionsshippingsumtaxreduced.10.userFunc.number.field = optionsshippingsumtaxreduced

        optionsspecialssumgross       < .optionspaymentsumgross
        optionsspecialssumgross.10.userFunc.number.field      = optionsspecialssumgross
        optionsspecialssumnet         < .optionspaymentsumgross
        optionsspecialssumnet.10.userFunc.number.field        = optionsspecialssumnet
        optionsspecialssumtaxnormal   < .optionspaymentsumgross
        optionsspecialssumtaxnormal.10.userFunc.number.field  = optionsspecialssumtaxnormal
        optionsspecialssumtaxreduced  < .optionspaymentsumgross
        optionsspecialssumtaxreduced.10.userFunc.number.field = optionsspecialssumtaxreduced

        sumitemsgross         < .optionspaymentsumgross
        sumitemsgross.10.userFunc.number.field        = sumitemsgross
        sumitemsnet           < .optionspaymentsumgross
        sumitemsnet.10.userFunc.number.field          = sumitemsnet
        sumitemstaxnormal     < .optionspaymentsumgross
        sumitemstaxnormal.10.userFunc.number.field    = sumitemstaxnormal
        sumitemstaxreduced    < .optionspaymentsumgross
        sumitemstaxreduced.10.userFunc.number.field   = sumitemstaxreduced

        sumoptionsgross       < .optionspaymentsumgross
        sumoptionsgross.10.userFunc.number.field      = sumoptionsgross
        sumoptionsnet         < .optionspaymentsumgross
        sumoptionsnet.10.userFunc.number.field        = sumoptionsnet
        sumoptionstaxnormal   < .optionspaymentsumgross
        sumoptionstaxnormal.10.userFunc.number.field  = sumoptionstaxnormal
        sumoptionstaxreduced  < .optionspaymentsumgross
        sumoptionstaxreduced.10.userFunc.number.field = sumoptionstaxreduced

        sumsumgross           < .optionspaymentsumgross
        sumsumgross.10.userFunc.number.field          = sumsumgross
        sumsumnet             < .optionspaymentsumgross
        sumsumnet.10.userFunc.number.field            = sumsumnet
        sumsumtaxnormal       < .optionspaymentsumgross
        sumsumtaxnormal.10.userFunc.number.field      = sumsumtaxnormal
        sumsumtaxreduced      < .optionspaymentsumgross
        sumsumtaxreduced.10.userFunc.number.field     = sumsumtaxreduced
        sumsumtaxsum          < .optionspaymentsumgross
        sumsumtaxsum.10.userFunc.number.field         = sumsumtaxsum
      }
    }
  }

    // payment, shipping, special
  options =
  options {
      // preset, options
    payment =
    payment {
        // default method
      preset = 1
        // cash in advance, invoice, cash on delivery
      options =
      options {
          // cash in advance: title, extra, tax
        1 =
        1 {
            // label, gross
          title = TEXT
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:paymentoption_cashinadvance
            noTrimWrap = || (0 {$plugin.caddy.main.currencySymbol})|
          }
            // extra cost (gross price) of payment method
          extra = 0.00
            // tax rate which will be applied (reduced or normal)
          tax = normal
        }
          // invoice: title, extra, tax
        2 =
        2 {
            // title of payment method
          title = TEXT
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:paymentoption_invoice
            noTrimWrap = || (3 {$plugin.caddy.main.currencySymbol})|
          }
            // extra cost (gross price) of payment method
          extra = 3.00
            // tax rate which will be applied (reduced or normal)
          tax = normal
        }
          // cash on delivery: title, extra, tax
        3 =
        3 {
            // title of payment method
          title = TEXT
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:paymentoption_cashondelivery
            noTrimWrap = || (15 {$plugin.caddy.main.currencySymbol})|
          }
            // extra cost (gross price) of payment method
          extra = 15.00
            // tax rate which will be applied (reduced or normal)
          tax = normal
        }
      }
    }
      // preset, options
    shipping =
    shipping {
        // default method
      preset = 1
        // maildefault, mailexpress
      options =
      options {
          // maildefault: title, extra, tax
        1 =
        1 {
            // title of shipping method
          title = TEXT
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:shippingoption_maildefault
            noTrimWrap = || (0 {$plugin.caddy.main.currencySymbol})|
          }
            // extra cost (gross price) of shipping method
          extra = 0.00
            // tax rate which will be applied (reduced or normal)
          tax = reduced
        }
          // title, extra, tax
        2 =
        2 {
            // mailexpress: title of shipping method
          title = TEXT
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:shippingoption_mailexpress
            noTrimWrap = || (12 {$plugin.caddy.main.currencySymbol})|
          }
            // extra cost (gross price) of shipping method
          extra = 12.00
            // tax rate which will be applied (reduced or normal)
          tax = reduced
        }
      }
    }
      // preset, options
    specials =
    specials {
        // devider for list of options in e-mails und PDF attachments
      devider = TEXT
      devider {
        value       = ,
        noTrimWrap  = || |
      }
        // neutralpackage, addfeeforislands
      options =
      options {
          // neutralpackage: title of payment method
        1 =
        1 {
            // title of payment method
          title = TEXT
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:specialoption_neutralpackage
            noTrimWrap = || (0 {$plugin.caddy.main.currencySymbol})|
          }
            // extra cost (gross price) of payment method
          extra = 0.00
            // tax rate which will be applied (reduced or normal)
          tax = normal
        }
          // addfeeforislands: title of payment method
        2 =
        2 {
            // title of payment method
          title = TEXT
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:specialoption_addfeeforislands
            noTrimWrap = || (13 {$plugin.caddy.main.currencySymbol})|
          }
            // extra cost (gross price) of payment method
          extra = 13.00
            // tax rate which will be applied (reduced or normal)
          tax = reduced
        }
      }
    }
  }

    // deliveryorder, invoice, revocation, terms
  pdf =
  pdf {
      // delivery order PDF
    deliveryorder =
    deliveryorder {
        // label - delivery order number - date . pdf
      filename = COA
      filename {
          // label: invoice
        10 = TEXT
        10 {
          data = LLL:EXT:caddy/pi1/locallang.xml:deliveryorder
          wrap = |-
        }
          // deliver order number
        20 = TEXT
        20 {
          field = numberDeliveryorderCurrent
        }
          // date
        30 = TEXT
        30 {
          data      = date : U
          strftime  = %Y%m%d%H%M%S
          wrap      = -|
        }
          // extension pdf
        50 = TEXT
        50 {
          value = pdf
          wrap  = .|
        }
      }
        // address, caddy, date, numbers, termOfCredit, additionaltextblocks
      content = 
      content {
          // deliveryorder, invoice
        address = 
        address {
            // body
          deliveryorder = 
          deliveryorder {
              // content
            header =
            header {
                // label for delivery order address
              content = TEXT
              content {
                value = Lieferaddresse
                lang {
                  de = Lieferaddresse
                  en = delivery address
                }
                wrap      = |<br>
              }
            }
            header >
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.deliveryorder.address.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.deliveryorder.address.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.deliveryorder.address.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.address}
              }
                // Address: company, first name and last name, street, zip and city, country
              content = COA
              content {
                  // Company
                10 = TEXT
                10 {
                  field     = deliveryorderCompany
                  required  = 1
                  wrap      = <b>|</b>
                }
                  // First name and last name
                20 = COA
                20 {
                  // First name
                  10 = TEXT
                  10 {
                    field     = deliveryorderFirstname
                  }
                    // Last name
                  20 = TEXT
                  20 {
                    field       = deliveryorderLastname
                    noTrimWrap  = | ||
                    required    = 1
                  }
                  wrap      = <br />|
                }
                  // Address
                30 = TEXT
                30 {
                  field     = deliveryorderAddress
                  wrap      = <br />|
                  required  = 1
                }
                  // ZIP and city
                40 = COA
                40 {
                    // ZIP
                  10 = TEXT
                  10 {
                    field     = deliveryorderZip
                  }
                    // City
                  20 = TEXT
                  20 {
                    field       = deliveryorderCity
                    noTrimWrap  = | ||
                    required    = 1
                  }
                  wrap      = <br />|
                }
                  // Country
                50 = TEXT
                50 {
                  field     = deliveryorderCountry
                  wrap      = <br />|
                  required  = 1
                }
              }
            }
          }
            // body
          invoice < .deliveryorder
          invoice {
            body {
              content = COA
              content {
                10 {
                  field = invoiceCompany
                }
                20 {
                  10 {
                    field = invoiceFirstname
                  }
                  20 {
                    field = invoiceLastname
                  }
                }
                30 {
                  field = invoiceAddress
                }
                40 {
                  10 {
                    field = invoiceZip
                  }
                  20 {
                    field = invoiceCity
                  }
                }
                50 {
                  field = invoiceCountry
                }
              }
            }
          }
        }

          // body
        caddy = 
        caddy {
            // properties
          body =
          body {
              // cell, font, textColor
            properties =
            properties {
                // align, height, width, x, y
              cell =
              cell {
                  // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                align = 
                  // [INTEGER] Height of content in millimeter 
                height = 0
                  // [INTEGER] Width of content in millimeter 
                width = {$plugin.caddy.pdf.caddy.width}
                  // [INTEGER] Position from left in millimeter 
                x = {$plugin.caddy.pdf.caddy.x}
                  // [INTEGER] Position from top in millimeter 
                y = {$plugin.caddy.pdf.caddy.y}
              }
                // family, size, stretching, style
              font =
              font {
                  // [String] Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                family = {$plugin.caddy.pdfGeneral.fontfamily}
                  // [Integer] Font size in points
                size = {$plugin.caddy.pdf.caddy.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                style =
              }
                // [String] color in HTML notation like #CC00CC or #FFF
              textColor = {$plugin.caddy.pdf.textColor.caddy}
            }
          }
        }

          // body
        date = 
        date {
            // properties, content
          body =
          body {
              // cell, font, textColor
            properties =
            properties {
                // align, height, width, x, y
              cell =
              cell {
                  // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                align = {$plugin.caddy.pdf.date.align} 
                  // [INTEGER] Height of content in millimeter 
                height = 0
                  // [INTEGER] Width of content in millimeter 
                width = 0
                  // [INTEGER] Position from left in millimeter 
                x = {$plugin.caddy.pdf.date.x}
                  // [INTEGER] Position from top in millimeter 
                y = {$plugin.caddy.pdf.date.y}
              }
                // family, size, stretching, style
              font =
              font {
                  // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                family = {$plugin.caddy.pdfGeneral.fontfamily}
                  // [Integer] Font size in points
                size  = {$plugin.caddy.pdf.date.fontsize}
                  // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                  // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                style =  
              }
                // [String] color in HTML notation like #CC00CC or #FFF
              textColor = {$plugin.caddy.pdf.textColor.date}
            }
              // data, strftime
            content = TEXT
            content {
              data      = date : U
              strftime  = {$plugin.caddy.pdf.date.strftime} 
            }
          }
        }

          // deliveryorder, invoice and order
        numbers = 
        numbers {
            // body
          deliveryorder = 
          deliveryorder {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.deliveryorder.number.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.deliveryorder.number.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.deliveryorder.number.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.numberDeliveryorder}
              }
                // label, prefix, deliveryordernumber
              content = COA
              content {
                  // label
                10 = TEXT
                10 {
                  data = LLL:EXT:caddy/pi1/locallang.xml:deliveryordernumber
                  noTrimWrap = || |
                }
                  // prefix
                20 = TEXT
                20 {
                  value = {$plugin.caddy.pdf.deliveryorder.number.prefix}
                }
                  // deliveryordernumber
                30 = TEXT
                30 {
                  field = numberDeliveryorderCurrent
                }
              }
            }
          }
            // body
          orderAndInvoice = 
          orderAndInvoice {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.deliveryorder.number.x}
                    // [INTEGER] Position from top in millimeter relative to delivery order number
                  y = TEXT
                  y {
                    value       = {$plugin.caddy.pdf.deliveryorder.number.y} + 10
                    prioriCalc  = intval
                  }
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points, taken from caddy.fontsize
                  size = {$plugin.caddy.pdf.caddy.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.numberLine}
              }
                // ordernumber devider invoicenumber
              content = COA
              content {
                  // label, prefix, ordernumber
                10 = COA
                10 {
                    // label
                  10 = TEXT
                  10 {
                    data = LLL:EXT:caddy/pi1/locallang.xml:ordernumber
                    noTrimWrap = || |
                  }
                    // prefix
                  20 = TEXT
                  20 {
                    value = {$plugin.caddy.pdf.order.number.prefix}
                  }
                    // ordernumber
                  30 = TEXT
                  30 {
                    field = numberOrderCurrent
                  }
                }
                  // devider
                20 = TEXT
                20 {
                  value       = |
                  noTrimWrap  = | | |
                }
                  // label, prefix, invoicenumber
                30 = COA
                30 {
                    // label
                  10 = TEXT
                  10 {
                    data = LLL:EXT:caddy/pi1/locallang.xml:invoicenumber
                    noTrimWrap = || |
                  }
                    // prefix
                  20 = TEXT
                  20 {
                    value = {$plugin.caddy.pdf.invoice.number.prefix}
                  }
                    // invoicenumber
                  30 = TEXT
                  30 {
                    field = numberInvoiceCurrent
                  }
                }
              }
            }
          }
        }
      }

    }
      // invoice PDF
    invoice =
    invoice {
        // label - invoicenumber - date . pdf
      filename = COA
      filename {
          // label: invoice
        10 = TEXT
        10 {
          data = LLL:EXT:caddy/pi1/locallang.xml:invoice
          wrap = |-
        }
          // invoicenumber
        20 = TEXT
        20 {
          field = numberInvoiceCurrent
        }
          // date
        30 = TEXT
        30 {
          data      = date : U
          strftime  = %Y%m%d%H%M%S
          wrap      = -|
        }
          // extension pdf
        50 = TEXT
        50 {
          value = pdf
          wrap  = .|
        }
      }
        // address, caddy, date, numbers, termOfCredit, additionaltextblocks
      content = 
      content {
          // deliveryorder, invoice
        address = 
        address {
            // header, body
          deliveryorder = 
          deliveryorder {
              // content
            header =
            header {
                // label for delivery order address
              content = TEXT
              content {
                data = LLL:EXT:caddy/pi1/locallang.xml:deliveryaddress
                wrap      = |<br>
              }
            }
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = TEXT
                  x {
                    value       = {$plugin.caddy.pdf.invoice.address.x} + 100
                    prioriCalc  = 1
                  }
                    // [INTEGER] Position from top in millimeter 
                  y = TEXT
                  y {
                    value       = {$plugin.caddy.pdf.invoice.address.y} - 6
                    prioriCalc  = 1
                  }
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.deliveryorder.address.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.address}
              }
                // Address: company, first name and last name, street, zip and city, country
              content = COA
              content {
                  // Company
                10 = TEXT
                10 {
                  field     = deliveryorderCompany
                  required  = 1
                  wrap      = <b>|</b>
                }
                  // First name and last name
                20 = COA
                20 {
                  // First name
                  10 = TEXT
                  10 {
                    field     = deliveryorderFirstname
                  }
                    // Last name
                  20 = TEXT
                  20 {
                    field       = deliveryorderLastname
                    noTrimWrap  = | ||
                    required    = 1
                  }
                  wrap      = <br />|
                }
                  // Address
                30 = TEXT
                30 {
                  field     = deliveryorderAddress
                  wrap      = <br />|
                  required  = 1
                }
                  // ZIP and city
                40 = COA
                40 {
                    // ZIP
                  10 = TEXT
                  10 {
                    field     = deliveryorderZip
                  }
                    // City
                  20 = TEXT
                  20 {
                    field       = deliveryorderCity
                    noTrimWrap  = | ||
                    required    = 1
                  }
                  wrap      = <br />|
                }
                  // Country
                50 = TEXT
                50 {
                  field     = deliveryorderCountry
                  wrap      = <br />|
                  required  = 1
                }
              }
            }
          }
            // body
          invoice = 
          invoice {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.invoice.address.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.invoice.address.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.invoice.address.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.address}
              }
                // Address: company, first name and last name, street, zip and city, country
              content = COA
              content {
                  // Company
                10 = TEXT
                10 {
                  field     = invoiceCompany
                  required  = 1
                  wrap      = <b>|</b>
                }
                  // First name and last name
                20 = COA
                20 {
                  // First name
                  10 = TEXT
                  10 {
                    field     = invoiceFirstname
                    required  = 1
                    wrap      = <br />|
                  }
                    // Last name
                  20 = TEXT
                  20 {
                    field       = invoiceLastname
                    noTrimWrap  = | ||
                    required    = 1
                  }
                }
                  // Address
                30 = TEXT
                30 {
                  field     = invoiceAddress
                  wrap      = <br />|
                  required  = 1
                }
                  // ZIP and city
                40 = COA
                40 {
                    // ZIP
                  10 = TEXT
                  10 {
                    field     = invoiceZip
                    required  = 1
                    wrap      = <br />|
                  }
                    // City
                  20 = TEXT
                  20 {
                    field       = invoiceCity
                    noTrimWrap  = | ||
                    required    = 1
                  }
                }
                  // Country
                50 = TEXT
                50 {
                  field     = invoiceCountry
                  wrap      = <br />|
                  required  = 1
                }
              }
            }
          }
        }

          // body
        caddy = 
        caddy {
            // properties
          body =
          body {
              // cell, font, textColor
            properties =
            properties {
                // align, height, width, x, y
              cell =
              cell {
                  // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                align = 
                  // [INTEGER] Height of content in millimeter 
                height = 0
                  // [INTEGER] Width of content in millimeter 
                width = {$plugin.caddy.pdf.caddy.width}
                  // [INTEGER] Position from left in millimeter 
                x = {$plugin.caddy.pdf.caddy.x}
                  // [INTEGER] Position from top in millimeter 
                y = {$plugin.caddy.pdf.caddy.y}
              }
                // family, size, stretching, style
              font =
              font {
                  // [String] Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                family = {$plugin.caddy.pdfGeneral.fontfamily}
                  // [Integer] Font size in points
                size = {$plugin.caddy.pdf.caddy.fontsize}
                  // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                  // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                style =
              }
                // [String] color in HTML notation like #CC00CC or #FFF
              textColor = {$plugin.caddy.pdf.textColor.caddy}
            }
          }
        }

          // body
        date = 
        date {
            // properties, content
          body =
          body {
              // cell, font, textColor
            properties =
            properties {
                // align, height, width, x, y
              cell =
              cell {
                  // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                align = {$plugin.caddy.pdf.date.align} 
                  // [INTEGER] Height of content in millimeter 
                height = 0
                  // [INTEGER] Width of content in millimeter 
                width = 0
                  // [INTEGER] Position from left in millimeter 
                x = {$plugin.caddy.pdf.date.x}
                  // [INTEGER] Position from top in millimeter 
                y = {$plugin.caddy.pdf.date.y}
              }
                // family, size, stretching, style
              font =
              font {
                  // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                family = {$plugin.caddy.pdfGeneral.fontfamily}
                  // [Integer] Font size in points
                size  = {$plugin.caddy.pdf.date.fontsize}
                  // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                  // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                style =  
              }
                // [String] color in HTML notation like #CC00CC or #FFF
              textColor = {$plugin.caddy.pdf.textColor.date}
            }
              // data, strftime
            content = TEXT
            content {
              data      = date : U
              strftime  = {$plugin.caddy.pdf.date.strftime} 
            }
          }
        }

          // deliveryorder, invoice and order
        numbers = 
        numbers {
            // body
          invoice = 
          invoice {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.invoice.number.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.invoice.number.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.invoice.number.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.numberInvoice}
              }
                // label, prefix, invoicenumber
              content = COA
              content {
                  // label
                10 = TEXT
                10 {
                  data = LLL:EXT:caddy/pi1/locallang.xml:invoicenumber
                  noTrimWrap = || |
                }
                  // prefix
                20 = TEXT
                20 {
                  value = {$plugin.caddy.pdf.invoice.number.prefix}
                }
                  // invoicenumber
                30 = TEXT
                30 {
                  field = numberInvoiceCurrent
                }
              }
            }
          }
            // body
          orderAndDeliveryorder = 
          orderAndDeliveryorder {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.deliveryorder.number.x}
                    // [INTEGER] Position from top in millimeter relative to delivery order number
                  y = TEXT
                  y {
                    value       = {$plugin.caddy.pdf.deliveryorder.number.y} + 10
                    prioriCalc  = intval
                  }
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points, taken from caddy.fontsize
                  size = {$plugin.caddy.pdf.caddy.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.numberLine}
              }
                // ordernumber devider deliveryordernumber
              content = COA
              content {
                  // label, prefix, ordernumber
                10 = COA
                10 {
                    // label
                  10 = TEXT
                  10 {
                    data = LLL:EXT:caddy/pi1/locallang.xml:ordernumber
                    noTrimWrap = || |
                  }
                    // prefix
                  20 = TEXT
                  20 {
                    value = {$plugin.caddy.pdf.order.number.prefix}
                  }
                    // ordernumber
                  30 = TEXT
                  30 {
                    field = numberOrderCurrent
                  }
                }
                  // devider
                20 = TEXT
                20 {
                  value       = |
                  noTrimWrap  = | | |
                }
                  // label, prefix, deliveryordernumber
                30 = COA
                30 {
                    // label
                  10 = TEXT
                  10 {
                    data = LLL:EXT:caddy/pi1/locallang.xml:deliveryordernumber
                    noTrimWrap = || |
                  }
                    // prefix
                  20 = TEXT
                  20 {
                    value = {$plugin.caddy.pdf.deliveryorder.number.prefix}
                  }
                    // deliveryordernumber
                  30 = TEXT
                  30 {
                    field = numberDeliveryorderCurrent
                  }
                }
              }
            }
          }
        }
          // body
        termOfCredit =
        termOfCredit {
            // properties, content
          body =
          body {
              // cell, font, textColor
            properties =
            properties {
                // align, height, width, x, y
              cell =
              cell {
                  // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                align = left
                  // [INTEGER] Height of content in millimeter 
                height = 0
                  // [INTEGER] Width of content in millimeter 
                width = 0
                  // [INTEGER] Position from left in millimeter 
                x = {$plugin.caddy.pdf.invoice.termOfCredit.x}
                  // [INTEGER] Position from top in millimeter 
                y = {$plugin.caddy.pdf.invoice.termOfCredit.y}
              }
                // family, size, stretching, style
              font =
              font {
                  // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                family = {$plugin.caddy.pdfGeneral.fontfamily}
                  // [Integer] Font size in points
                size  = {$plugin.caddy.pdf.invoice.termOfCredit.fontsize}
                  // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                  // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                style =  
              }
                // [String] color in HTML notation like #CC00CC or #FFF
              textColor = {$plugin.caddy.pdf.textColor.termOfCredit}
            }
              // Line 1: Term of credit, Line 2: Recommend us
            content = COA
            content {
                // Line 1: Term of credit
              10 = COA
              10 {
                  // Pay until
                10 = TEXT
                10 {
                  value = Please pay until 
                  lang {
                    de = Zahlen Sie bitte bis sp&auml;testens
                    en = Please pay until
                  }
                  noTrimWrap = || |
                }
                  // due date
                20 = USER
                20 {
                  userFunc = tx_caddy_userfunc->calcDueDate
                  userFunc {
                    strtotime = {$plugin.caddy.main.dueDate}
                    strftime  = {$plugin.caddy.main.dueDateFormat} 
                  }
                }
                  // space
                21 = TEXT
                21 {
                  value = 
                  noTrimWrap = || |
                }
                  // amount
                30 = COA
                30 {
                    // sum gross
                  10 = USER
                  10 {
                    userFunc = tx_caddy_userfunc->numberformat
                    userFunc {
                      number = TEXT
                      number {
                        field = sumsumgross
                      }
                      decimal       = {$plugin.caddy.main.decimal}
                      dec_point     = {$plugin.caddy.main.dec_point}
                      thousands_sep = {$plugin.caddy.main.thousands_sep}
                      drs           = {$plugin.caddy.debug.userfunc}
                    }
                  }
                    // currency symbol
                  20 = TEXT
                  20 {
                    value = {$plugin.caddy.main.currencySymbol}
                    noTrimWrap = | ||
                  }
                  wrap = <b>|</b>
                }
                  // invoice number
                40 = COA
                40 {
                    // text
                  10 = TEXT
                  10 {
                    value = with the annotation
                    lang {
                      de = mit dem Vermerk
                      en = with the annotation
                    }
                    noTrimWrap  = | | |
                  }
                    // invoice number
                  20 = COA
                  20 {
                      // label
                    10 = TEXT
                    10 {
                      data = LLL:EXT:caddy/pi1/locallang.xml:invoicenumber
                      noTrimWrap = || |
                    }
                      // prefix
                    20 = TEXT
                    20 {
                      value = {$plugin.caddy.pdf.invoice.number.prefix}
                    }
                      // number
                    30 = TEXT
                    30 {
                      field = numberInvoiceCurrent
                    }
                    wrap = "<b>|</b>"
                  }
                }
                  // to account
                50 = TEXT
                50 {
                  value = to the account below.
                  lang {
                    de = auf das unten angegebene Konto.
                    en = to the account below.
                  }
                  noTrimWrap = | ||
                }
                wrap  = |<br />
              }
                // Line 2: Recommend us
              20 = TEXT
              20 {
                value = We will be happy, if you recommend us. 
                lang {
                  de = Wir w&uuml;rden uns freuen, wenn Sie uns weiterempfehlen.
                  en = We will be happy, if you recommend us.
                }
              }
            }
          }
        }
      }
    }
      // revocation PDF
    revocation =
    revocation {
        // label - invoicenumber - date . pdf
      filename = COA
      filename {
          // label: revocation
        10 = TEXT
        10 {
          value = revocation
          lang {
            de = Widerrufsrecht
            en = revocation
          }
          wrap = |-
        }
          // invoicenumber
        20 = TEXT
        20 {
          field = numberInvoiceCurrent
        }
          // date
        30 = TEXT
        30 {
          data      = date : U
          strftime  = %Y%m%d%H%M%S
          wrap      = -|
        }
          // extension pdf
        50 = TEXT
        50 {
          value = pdf
          wrap  = .|
        }
      }
        // address, date, additionaltextblocks
      content = 
      content {
          // invoice
        address = 
        address {
            // body
          invoice = TEXT
          invoice {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.invoice.address.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.invoice.address.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.invoice.address.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.address}
              }
                // Address: company, first name and last name, street, zip and city, country
              content = COA
              content {
                  // Company
                10 = TEXT
                10 {
                  field     = invoiceCompany
                  required  = 1
                  wrap      = <b>|</b>
                }
                  // First name and last name
                20 = COA
                20 {
                  // First name
                  10 = TEXT
                  10 {
                    field     = invoiceFirstname
                    required  = 1
                    wrap      = <br />|
                  }
                    // Last name
                  20 = TEXT
                  20 {
                    field       = invoiceLastname
                    noTrimWrap  = | ||
                    required    = 1
                  }
                }
                  // Address
                30 = TEXT
                30 {
                  field     = invoiceAddress
                  wrap      = <br />|
                  required  = 1
                }
                  // ZIP and city
                40 = COA
                40 {
                    // ZIP
                  10 = TEXT
                  10 {
                    field     = invoiceZip
                    required  = 1
                    wrap      = <br />|
                  }
                    // City
                  20 = TEXT
                  20 {
                    field       = invoiceCity
                    noTrimWrap  = | ||
                    required    = 1
                  }
                }
                  // Country
                50 = TEXT
                50 {
                  field     = invoiceCountry
                  wrap      = <br />|
                  required  = 1
                }
              }
            }
          }
        }

          // body
        date = 
        date {
            // properties, content
          body =
          body {
              // cell, font, textColor
            properties =
            properties {
                // align, height, width, x, y
              cell =
              cell {
                  // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                align = {$plugin.caddy.pdf.date.align} 
                  // [INTEGER] Height of content in millimeter 
                height = 0
                  // [INTEGER] Width of content in millimeter 
                width = 0
                  // [INTEGER] Position from left in millimeter 
                x = {$plugin.caddy.pdf.date.x}
                  // [INTEGER] Position from top in millimeter 
                y = {$plugin.caddy.pdf.date.y}
              }
                // family, size, stretching, style
              font =
              font {
                  // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                family = {$plugin.caddy.pdfGeneral.fontfamily}
                  // [Integer] Font size in points
                size  = {$plugin.caddy.pdf.date.fontsize}
                  // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                  // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                style =  
              }
                // [String] color in HTML notation like #CC00CC or #FFF
              textColor = {$plugin.caddy.pdf.textColor.date}
            }
              // data, strftime
            content = TEXT
            content {
              data      = date : U
              strftime  = {$plugin.caddy.pdf.date.strftime} 
            }
          }
        }

          // revocation
        additionaltextblocks =
        additionaltextblocks {
            // body
          revocation =
          revocation {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = {$plugin.caddy.pdf.revocation.align} 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.revocation.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.revocation.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.revocation.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.revocation}
              }
                // content of page with id plugin.caddy.pages.revocation
              content < styles.content.get
              content {
                select {
                  pidInList = {$plugin.caddy.pages.revocation}
                }
              }
            }
          }
        }
      }
    }
      // terms PDF
    terms =
    terms {
        // label - invoicenumber - date . pdf
      filename = COA
      filename {
          // label: terms
        10 = TEXT
        10 {
          value = terms
          lang {
            de = AGB
            en = terms
          }
          wrap = |-
        }
          // invoicenumber
        20 = TEXT
        20 {
          field = numberInvoiceCurrent
        }
          // date
        30 = TEXT
        30 {
          data      = date : U
          strftime  = %Y%m%d%H%M%S
          wrap      = -|
        }
          // extension pdf
        50 = TEXT
        50 {
          value = pdf
          wrap  = .|
        }
      }
        // address, date, additionaltextblocks
      content = 
      content {
          // invoice
        address = 
        address {
            // body
          invoice = TEXT
          invoice {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.invoice.address.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.invoice.address.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.invoice.address.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.address}
              }
                // Address: company, first name and last name, street, zip and city, country
              content = COA
              content {
                  // Company
                10 = TEXT
                10 {
                  field     = invoiceCompany
                  required  = 1
                  wrap      = <b>|</b>
                }
                  // First name and last name
                20 = COA
                20 {
                  // First name
                  10 = TEXT
                  10 {
                    field     = invoiceFirstname
                    required  = 1
                    wrap      = <br />|
                  }
                    // Last name
                  20 = TEXT
                  20 {
                    field       = invoiceLastname
                    noTrimWrap  = | ||
                    required    = 1
                  }
                }
                  // Address
                30 = TEXT
                30 {
                  field     = invoiceAddress
                  wrap      = <br />|
                  required  = 1
                }
                  // ZIP and city
                40 = COA
                40 {
                    // ZIP
                  10 = TEXT
                  10 {
                    field     = invoiceZip
                    required  = 1
                    wrap      = <br />|
                  }
                    // City
                  20 = TEXT
                  20 {
                    field       = invoiceCity
                    noTrimWrap  = | ||
                    required    = 1
                  }
                }
                  // Country
                50 = TEXT
                50 {
                  field     = invoiceCountry
                  wrap      = <br />|
                  required  = 1
                }
              }
            }
          }
        }

          // body
        date = 
        date {
            // properties, content
          body =
          body {
              // cell, font, textColor
            properties =
            properties {
                // align, height, width, x, y
              cell =
              cell {
                  // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                align = {$plugin.caddy.pdf.date.align} 
                  // [INTEGER] Height of content in millimeter 
                height = 0
                  // [INTEGER] Width of content in millimeter 
                width = 0
                  // [INTEGER] Position from left in millimeter 
                x = {$plugin.caddy.pdf.date.x}
                  // [INTEGER] Position from top in millimeter 
                y = {$plugin.caddy.pdf.date.y}
              }
                // family, size, stretching, style
              font =
              font {
                  // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                family = {$plugin.caddy.pdfGeneral.fontfamily}
                  // [Integer] Font size in points
                size  = {$plugin.caddy.pdf.date.fontsize}
                  // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                  // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                style =  
              }
                // [String] color in HTML notation like #CC00CC or #FFF
              textColor = {$plugin.caddy.pdf.textColor.date}
            }
              // data, strftime
            content = TEXT
            content {
              data      = date : U
              strftime  = {$plugin.caddy.pdf.date.strftime} 
            }
          }
        }

          // terms
        additionaltextblocks =
        additionaltextblocks {
            // body
          terms =
          terms {
              // properties, content
            body =
            body {
                // cell, font, textColor
              properties =
              properties {
                  // align, height, width, x, y
                cell =
                cell {
                    // [STRING] L: left. C: center. R: right. empty: left for LTR or right for RTL
                  align = {$plugin.caddy.pdf.terms.align} 
                    // [INTEGER] Height of content in millimeter 
                  height = 0
                    // [INTEGER] Width of content in millimeter 
                  width = 0
                    // [INTEGER] Position from left in millimeter 
                  x = {$plugin.caddy.pdf.terms.x}
                    // [INTEGER] Position from top in millimeter 
                  y = {$plugin.caddy.pdf.terms.y}
                }
                  // family, size, stretching, style
                font =
                font {
                    // [String] Arial, Courier, Helvetica, Symbol, Times, ZapfDingbats - or font name
                  family = {$plugin.caddy.pdfGeneral.fontfamily}
                    // [Integer] Font size in points
                  size  = {$plugin.caddy.pdf.terms.fontsize}
                    // [String] Strecth the font (in percent). 100: no effect, 90: smaller, 110: expanded
                  stretching = {$plugin.caddy.pdfGeneral.fontStretching}
                    // empty: regular, B: bold, I: italic, U: underline. Combinations are possible like: BI
                  style =  
                }
                  // [String] color in HTML notation like #CC00CC or #FFF
                textColor = {$plugin.caddy.pdf.textColor.terms}
              }
                // content of page with id plugin.caddy.pages.terms
              content < styles.content.get
              content {
                select {
                  pidInList = {$plugin.caddy.pages.terms}
                }
              }
            }
          }
        }
      }
    }
  }
    // page id of the caddy
  pid = {$plugin.caddy.pages.caddy}

    // Never remove this property!
  pluginCheck = dummy

    // decimal, dec_point, thousands_sep, currencySymbol, currencySymbolBeforePrice, quantitySymbol, service_attributes_X_symbol
  symbols = 
  symbols {
    decimal         = {$plugin.caddy.main.decimal}
    dec_point       = {$plugin.caddy.main.dec_point}
    thousands_sep   = {$plugin.caddy.main.thousands_sep}
    currencySymbol  = {$plugin.caddy.main.currencySymbol}
    currencySymbolBeforePrice = {$plugin.caddy.main.currencySymbolBeforePrice}
    quantitySymbol  = {$plugin.caddy.symbol.quantitySymbol}
    service_attribute_1_symbol = {$plugin.caddy.symbol.service_attribute_1_symbol}
    service_attribute_2_symbol = {$plugin.caddy.symbol.service_attribute_2_symbol}
    service_attribute_3_symbol = {$plugin.caddy.symbol.service_attribute_3_symbol}
  }

    // e-mail, fancybox, html, pdf
  templates =
  templates {
      // file, marker, table
    e-mail =
    e-mail {
      file = {$plugin.caddy.templates.e-mail}
        // all, item
      marker =
      marker {
        all   = ###CADDY_EMAIL###
        item  = ###ITEM###
      }
        // border, cellpadding, cellspacing
      table = 
      table {
        bordercolor             = {$plugin.caddy.html.color.border}
        width_td_qty            = {$plugin.caddy.html.width.table.td.qty}
        width_td_sku            = {$plugin.caddy.html.width.table.td.sku}
        width_td_item           = {$plugin.caddy.html.width.table.td.item}
        width_td_tax            = {$plugin.caddy.html.width.table.td.tax}
        width_td_net            = {$plugin.caddy.html.width.table.td.net}
        width_td_sum            = {$plugin.caddy.html.width.table.td.sum}
        width_td_skuitemtax     = {$plugin.caddy.html.width.table.td.skuitemtax}
        width_td_skuitemtaxnet  = {$plugin.caddy.html.width.table.td.skuitemtaxnet}
      }
    }
      // caddy, caddymini
    html =
    html {
        // pi1: file, marker, table
      caddy =
      caddy {
        file = {$plugin.caddy.templates.html.caddy}
          // all, item
        marker =
        marker {
          all   = ###CADDY###
          item  = ###ITEM###
        }
          // border, cellpadding, cellspacing
        table = 
        table {
          bordercolor             = {$plugin.caddy.html.color.border}
          width_td_qty            = {$plugin.caddy.html.width.table.td.qty}
          width_td_sku            = {$plugin.caddy.html.width.table.td.sku}
          width_td_item           = {$plugin.caddy.html.width.table.td.item}
          width_td_tax            = {$plugin.caddy.html.width.table.td.tax}
          width_td_net            = {$plugin.caddy.html.width.table.td.net}
          width_td_sum            = {$plugin.caddy.html.width.table.td.sum}
          width_td_skuitemtax     = {$plugin.caddy.html.width.table.td.skuitemtax}
          width_td_skuitemtaxnet  = {$plugin.caddy.html.width.table.td.skuitemtaxnet}
        }
      }
        // pi3: file, marker
      caddymini =
      caddymini {
        file = {$plugin.caddy.templates.html.caddymini}
          // all, item
        marker =
        marker {
          all   = ###CADDYMINI###
          item  = ###ITEMS###
        }
      }
        // pi2: file, marker
      caddysum =
      caddysum {
        file = {$plugin.caddy.templates.html.caddysum}
          // all
        marker =
        marker {
          all   = ###CADDYSUM###
        }
      }
    }
      // delivery order, invoice, revocation, terms
    pdf =
    pdf {
        // file, marker, table
      deliveryorder =
      deliveryorder {
        file = {$plugin.caddy.templates.pdf.deliveryorder}
          // all, item
        marker =
        marker {
          all   = ###CADDY_EMAILDELIVERY###
          item  = ###ITEM###
        }
          // border, cellpadding, cellspacing
        table = 
        table {
          bordercolor             = {$plugin.caddy.html.color.border}
          width_td_qty            = {$plugin.caddy.html.width.table.td.qty}
          width_td_sku            = {$plugin.caddy.html.width.table.td.sku}
          width_td_item           = {$plugin.caddy.html.width.table.td.item}
          width_td_tax            = {$plugin.caddy.html.width.table.td.tax}
          width_td_net            = {$plugin.caddy.html.width.table.td.net}
          width_td_sum            = {$plugin.caddy.html.width.table.td.sum}
          width_td_skuitemtax     = {$plugin.caddy.html.width.table.td.skuitemtax}
          width_td_skuitemtaxnet  = {$plugin.caddy.html.width.table.td.skuitemtaxnet}
        }
      }
        // file, marker, table
      invoice =
      invoice {
        file = {$plugin.caddy.templates.pdf.invoice}
          // all, item
        marker =
        marker {
          all   = ###CADDY_EMAIL###
          item  = ###ITEM###
        }
          // border, cellpadding, cellspacing
        table = 
        table {
          bordercolor             = {$plugin.caddy.html.color.border}
          width_td_qty            = {$plugin.caddy.html.width.table.td.qty}
          width_td_sku            = {$plugin.caddy.html.width.table.td.sku}
          width_td_item           = {$plugin.caddy.html.width.table.td.item}
          width_td_tax            = {$plugin.caddy.html.width.table.td.tax}
          width_td_net            = {$plugin.caddy.html.width.table.td.net}
          width_td_sum            = {$plugin.caddy.html.width.table.td.sum}
          width_td_skuitemtax     = {$plugin.caddy.html.width.table.td.skuitemtax}
          width_td_skuitemtaxnet  = {$plugin.caddy.html.width.table.td.skuitemtaxnet}
        }
      }
        // #i0013, 130604, dwildt, + // file, marker, table
      revocation =
      revocation {
        file = {$plugin.caddy.templates.pdf.invoice}
          // all, item
        marker =
        marker {
          all   = ###CADDY_REVOCATION###
          item  = ###ITEM###
        }
          // border, cellpadding, cellspacing
        table = 
        table {
          bordercolor             = {$plugin.caddy.html.color.border}
          width_td_qty            = {$plugin.caddy.html.width.table.td.qty}
          width_td_sku            = {$plugin.caddy.html.width.table.td.sku}
          width_td_item           = {$plugin.caddy.html.width.table.td.item}
          width_td_tax            = {$plugin.caddy.html.width.table.td.tax}
          width_td_net            = {$plugin.caddy.html.width.table.td.net}
          width_td_sum            = {$plugin.caddy.html.width.table.td.sum}
          width_td_skuitemtax     = {$plugin.caddy.html.width.table.td.skuitemtax}
          width_td_skuitemtaxnet  = {$plugin.caddy.html.width.table.td.skuitemtaxnet}
        }
      }
        // #i0013, 130604, dwildt, + // file, marker, table
      terms =
      terms {
        file = {$plugin.caddy.templates.pdf.invoice}
          // all, item
        marker =
        marker {
          all   = ###CADDY_TERMS###
          item  = ###ITEM###
        }
          // border, cellpadding, cellspacing
        table = 
        table {
          bordercolor             = {$plugin.caddy.html.color.border}
          width_td_qty            = {$plugin.caddy.html.width.table.td.qty}
          width_td_sku            = {$plugin.caddy.html.width.table.td.sku}
          width_td_item           = {$plugin.caddy.html.width.table.td.item}
          width_td_tax            = {$plugin.caddy.html.width.table.td.tax}
          width_td_net            = {$plugin.caddy.html.width.table.td.net}
          width_td_sum            = {$plugin.caddy.html.width.table.td.sum}
          width_td_skuitemtax     = {$plugin.caddy.html.width.table.td.skuitemtax}
          width_td_skuitemtaxnet  = {$plugin.caddy.html.width.table.td.skuitemtaxnet}
        }
      }
    }
  }

    // reduced, normal
  tax =
  tax {
    reduced     = {$plugin.caddy.tax.reduced}
    reducedCalc = {$plugin.caddy.tax.reducedCalc}
    normal      = {$plugin.caddy.tax.normal}
    normalCalc  = {$plugin.caddy.tax.normalCalc}
  }

    // caddyCheckOut
  typeNum = 
  typeNum {
    caddyCheckOut = {$plugin.caddy.typeNum.caddyCheckOut}
  }
}
  // plugin.tx_caddy_pi1



  ///////////////////////////////////////////////////////////////
  //
  // plugin.tx_caddy_pi1._HTMLMARKER

plugin.tx_caddy_pi1 {
    // linktoshop
  _HTMLMARKER =
  _HTMLMARKER {
      // label, icon. Replaces _HTMLMARKER_LINTOSHOP
    linktoshop = COA
    linktoshop {
        // Label
      10 = TEXT
      10 {
        data = LLL:EXT:caddy/pi1/locallang.xml:linktoshop
        typolink {
          parameter = {$plugin.caddy.pages.shop}
          title {
            data = LLL:EXT:caddy/pi1/locallang.xml:linktoshop
          }
        }
        noTrimWrap  = || |
      }
        // Icon
      20 = IMAGE
      20 {
        file = {$plugin.caddy.html.color.icon.caddy}
        altText {
          data = LLL:EXT:caddy/pi1/locallang.xml:shop
        }
        titleText {
          data = LLL:EXT:caddy/pi1/locallang.xml:shop
        }
        params = class="linktoshop"
        imageLinkWrap = 1
        imageLinkWrap {
          enable = 1
          typolink {
            parameter = {$plugin.caddy.pages.shop}
          }
        }
      }
      wrap = <div class="linktoshop caddylinktoshop">|</div>
    }
  }
}
  // plugin.tx_caddy_pi1._HTMLMARKER



  ///////////////////////////////////////////////////////////////
  //
  // plugin.tx_caddy_pi1: _CSS_DEFAULT_STYLE

plugin.tx_caddy_pi1 {

  _CSS_DEFAULT_STYLE (
    #tx-caddy-pi1-loader {
      background: #fff url(/typo3conf/ext/caddy/files/img/loader.gif) no-repeat  center ;
      cursor:wait;
      display:none;
      opacity:.8;
      position: absolute;
      z-index:10000;
    }
)
}
  // plugin.tx_caddy_pi1: _CSS_DEFAULT_STYLE



  ///////////////////////////////////////////////////////////////
  //
  // plugin.tx_caddy_pi2


plugin.tx_caddy_pi2 {
    // item, marker
  content = 
  content {
      // label, sumsumgross
    sum = COA
    sum {
        // label
      20 = TEXT
      20 {
        data        = LLL:EXT:caddy/pi2/locallang.xml:phrasesum
        noTrimWrap  = |<span class="label sumlabel">|</span> |
      }
        // sumsumgross
      30 = COA
      30 {
          // value
        10 = USER
        10.userFunc = tx_caddy_userfunc->numberformat
        10.userFunc {
          number = TEXT
          number.field = sumsumgross

          decimal       = 2
          dec_point     = {$plugin.caddy.main.dec_point}
          thousands_sep = {$plugin.caddy.main.thousands_sep}

          drs = {$plugin.caddy.debug.userfunc}
        }
          // currency
        20 = TEXT
        20 {
          value = {$plugin.caddy.main.currencySymbol}
          noTrimWrap = | ||
        }
        wrap = <span class="gross sumgross">|</span>
      }
    }
  }
    // page id of the caddy
  pid = {$plugin.caddy.pages.caddy}

    // e-mail, html, pdf
  templates =
  templates < plugin.tx_caddy_pi1.templates
}
  // plugin.tx_caddy_pi2



  ///////////////////////////////////////////////////////////////
  //
  // plugin.tx_caddy_pi3


plugin.tx_caddy_pi3 {
    // item, marker
  content = 
  content {
      // quantity, label, gross
    item = COA
    item {
        // quantity
      10 = TEXT
      10 {
        field = quantity
        wrap = <div class="quantity itemquantity">|</div>
      }
        // label
      20 = TEXT
      20 {
        field = label
        wrap  = <div class="label itemlabel">|</div>
      }
        // gross
      30 = COA
      30 {
          // value
        10 = USER
        10.userFunc = tx_caddy_userfunc->numberformat
        10.userFunc {
          number = TEXT
          number.field = gross

          decimal       = 2
          dec_point     = {$plugin.caddy.main.dec_point}
          thousands_sep = {$plugin.caddy.main.thousands_sep}

          drs = {$plugin.caddy.debug.userfunc}
        }
          // currency
        20 = TEXT
        20 {
          value = {$plugin.caddy.main.currencySymbol}
          noTrimWrap = | ||
        }
        wrap = <div class="gross itemgross">|</div>
      }
      wrap = <div class="item minicaddyitem">|</div><div class="caddy_cleaner"></div>
    }
      // quantity, label, gross
    sum = COA
    sum {
        // quantity
      10 = TEXT
      10 {
        field = quantity
        wrap = <div class="quantity sumquantity">|</div>
      }
        // label
      20 = COA
      20 {
          // in case of one item
        10 = TEXT
        10 {
          if {
            value = 2 
            isLessThan {
              field = quantity
            }
          }
          data = LLL:EXT:caddy/pi3/locallang.xml:item
        }
          // in case of more than one item
        20 = TEXT
        20 {
          if {
            value = 2 
            isLessThan {
              field = quantity
            }
            negate  = 1
          }
          data = LLL:EXT:caddy/pi3/locallang.xml:items
        }
        wrap = <div class="label sumlabel">|</div>
      }
        // gross
      30 = COA
      30 {
        10 = USER
        10.userFunc = tx_caddy_userfunc->numberformat
        10.userFunc {
          number = TEXT
          number.field = gross

          decimal       = 2
          dec_point     = {$plugin.caddy.main.dec_point}
          thousands_sep = {$plugin.caddy.main.thousands_sep}

          drs = {$plugin.caddy.debug.userfunc}
        }
        20 = TEXT
        20 {
          value = {$plugin.caddy.main.currencySymbol}
          noTrimWrap = | ||
        }
        wrap = <div class="gross sumgross">|</div><div class="caddy_cleaner"></div>
      }
      wrap = <div class="sum minicaddysum">|</div>
    }
  }
    // page id of the caddy
  pid = {$plugin.caddy.pages.caddy}

    // e-mail, html, pdf
  templates =
  templates < plugin.tx_caddy_pi1.templates

    // linktocaddy, linktoshop
  _HTMLMARKER =
  _HTMLMARKER {
      // label, icon. Replaces _HTMLMARKER_LINTOCADDY
    linktocaddy = COA
    linktocaddy {
        // Label
      10 = TEXT
      10 {
        data = LLL:EXT:caddy/pi3/locallang.xml:linktocaddy
        typolink {
          parameter = {$plugin.caddy.pages.caddy}
          title {
            data = LLL:EXT:caddy/pi3/locallang.xml:linktocaddy
          }
        }
        noTrimWrap  = || |
      }
        // Icon
      20 = IMAGE
      20 {
        file = {$plugin.caddy.html.color.icon.caddy}
        altText {
          data = LLL:EXT:caddy/pi3/locallang.xml:caddy
        }
        titleText {
          data = LLL:EXT:caddy/pi3/locallang.xml:caddy
        }
        params = class="linktocaddy"
        imageLinkWrap = 1
        imageLinkWrap {
          enable = 1
          typolink {
            parameter = {$plugin.caddy.pages.caddy}
          }
        }
      }
      wrap = <div class="linktocaddy minicaddylinktocaddy">|</div>
    }
      // label, icon. Replaces _HTMLMARKER_LINTOSHOP
    linktoshop = COA
    linktoshop {
        // Label
      10 = TEXT
      10 {
        data = LLL:EXT:caddy/pi3/locallang.xml:linktoshop
        typolink {
          parameter = {$plugin.caddy.pages.shop}
          title {
            data = LLL:EXT:caddy/pi3/locallang.xml:linktoshop
          }
        }
        noTrimWrap  = || |
      }
        // Icon
      20 = IMAGE
      20 {
        file = {$plugin.caddy.html.color.icon.caddy}
        altText {
          data = LLL:EXT:caddy/pi3/locallang.xml:shop
        }
        titleText {
          data = LLL:EXT:caddy/pi3/locallang.xml:shop
        }
        params = class="linktoshop"
        imageLinkWrap = 1
        imageLinkWrap {
          enable = 1
          typolink {
            parameter = {$plugin.caddy.pages.shop}
          }
        }
      }
      wrap = <div class="linktoshop minicaddylinktoshop">|</div>
    }
  }
}
  // plugin.tx_caddy_pi3



  ///////////////////////////////////////////////////////////////
  //
  // caddyCheckOut: PAGE object with the caddy check-out

caddyCheckOut < plugin.tx_caddy_pi1.javascript.ajax.caddyCheckOut

[globalVar = GP:type = {$plugin.caddy.typeNum.caddyCheckOut}]
    // Don't handle header of the content element (plugin)
  lib.stdheader >
[global]
  // caddyCheckOut: PAGE object with the caddy check-out